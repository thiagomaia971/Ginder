// <auto-generated />
using System;
using Ginder.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ginder.Infra.Migrations
{
    [DbContext(typeof(GinderDbContext))]
    [Migration("20200707014210_AddUserMigration3")]
    partial class AddUserMigration3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ginder.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e4275ae-b5ed-4a16-a8c7-32d4c5cbd4f4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 260, DateTimeKind.Unspecified).AddTicks(5060), new TimeSpan(0, -3, 0, 0, 0)),
                            ImagePath = "/Games/LeagueOfLegends.png",
                            Name = "League of Legends"
                        },
                        new
                        {
                            Id = new Guid("885c76df-b632-496e-a87f-98a5a362bd94"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 260, DateTimeKind.Unspecified).AddTicks(5282), new TimeSpan(0, -3, 0, 0, 0)),
                            ImagePath = "/Games/WorldOfWarcraft.png",
                            Name = "World of Warcraft"
                        },
                        new
                        {
                            Id = new Guid("71833138-ba80-4851-bf9d-ff01ea572d88"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 260, DateTimeKind.Unspecified).AddTicks(5291), new TimeSpan(0, -3, 0, 0, 0)),
                            ImagePath = "/Games/ShadowArena.png",
                            Name = "Shadow Arena"
                        });
                });

            modelBuilder.Entity("Ginder.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8413c17-63e7-491a-9eae-0489737e19ff"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 330, DateTimeKind.Unspecified).AddTicks(5037), new TimeSpan(0, -3, 0, 0, 0)),
                            Idade = 20,
                            Name = "Admin Teste Player"
                        },
                        new
                        {
                            Id = new Guid("e19e6927-a444-489c-885c-45735f88e6ee"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 330, DateTimeKind.Unspecified).AddTicks(5159), new TimeSpan(0, -3, 0, 0, 0)),
                            Idade = 23,
                            Name = "Player 2"
                        },
                        new
                        {
                            Id = new Guid("b0707b09-f1bd-44e9-928b-9277e1bf8d46"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 330, DateTimeKind.Unspecified).AddTicks(5167), new TimeSpan(0, -3, 0, 0, 0)),
                            Idade = 23,
                            Name = "Player 3"
                        },
                        new
                        {
                            Id = new Guid("eaf6db7c-e7f3-49c8-afbe-66ed55d52af8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 330, DateTimeKind.Unspecified).AddTicks(5175), new TimeSpan(0, -3, 0, 0, 0)),
                            Idade = 17,
                            Name = "Player 4"
                        });
                });

            modelBuilder.Entity("Ginder.Domain.Entities.PlayerGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PeriodTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGames");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fee6b24d-a74d-4391-ab0e-091d48762b6f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 331, DateTimeKind.Unspecified).AddTicks(7209), new TimeSpan(0, -3, 0, 0, 0)),
                            Description = "Jogo pra me divertir",
                            GameId = new Guid("8e4275ae-b5ed-4a16-a8c7-32d4c5cbd4f4"),
                            PeriodTime = "Jogo aos finais de semanas",
                            PlayerId = new Guid("c8413c17-63e7-491a-9eae-0489737e19ff"),
                            Role = "Jogo na posição de ADC"
                        },
                        new
                        {
                            Id = new Guid("b2768f45-4d9f-4dae-abec-a6c07cc35603"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 331, DateTimeKind.Unspecified).AddTicks(7389), new TimeSpan(0, -3, 0, 0, 0)),
                            Description = "Jogo pra zuar3",
                            GameId = new Guid("885c76df-b632-496e-a87f-98a5a362bd94"),
                            PeriodTime = "Todo santo dia xD4",
                            PlayerId = new Guid("c8413c17-63e7-491a-9eae-0489737e19ff"),
                            Role = "DPS"
                        },
                        new
                        {
                            Id = new Guid("488d7a32-cd07-4963-8846-61a1ff12deee"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 331, DateTimeKind.Unspecified).AddTicks(7401), new TimeSpan(0, -3, 0, 0, 0)),
                            Description = "Jogo pra zuar",
                            GameId = new Guid("8e4275ae-b5ed-4a16-a8c7-32d4c5cbd4f4"),
                            PeriodTime = "Todo santo dia xD",
                            PlayerId = new Guid("e19e6927-a444-489c-885c-45735f88e6ee"),
                            Role = "MID"
                        },
                        new
                        {
                            Id = new Guid("23098ff0-1267-460f-a3f0-fbea676a4279"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 331, DateTimeKind.Unspecified).AddTicks(7411), new TimeSpan(0, -3, 0, 0, 0)),
                            Description = "Jogo pra zuar2",
                            GameId = new Guid("8e4275ae-b5ed-4a16-a8c7-32d4c5cbd4f4"),
                            PeriodTime = "Todo santo dia xD2",
                            PlayerId = new Guid("b0707b09-f1bd-44e9-928b-9277e1bf8d46"),
                            Role = "ADC"
                        },
                        new
                        {
                            Id = new Guid("2adcaf82-a6a7-46d2-b126-0d342cd51130"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 331, DateTimeKind.Unspecified).AddTicks(7433), new TimeSpan(0, -3, 0, 0, 0)),
                            Description = "Jogo pra zuar2",
                            GameId = new Guid("885c76df-b632-496e-a87f-98a5a362bd94"),
                            PeriodTime = "Todo santo dia xD3",
                            PlayerId = new Guid("b0707b09-f1bd-44e9-928b-9277e1bf8d46"),
                            Role = "Healer"
                        });
                });

            modelBuilder.Entity("Ginder.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6699c75-5f44-4029-a404-84ce8a3951c8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 7, 6, 22, 42, 9, 332, DateTimeKind.Unspecified).AddTicks(3131), new TimeSpan(0, -3, 0, 0, 0)),
                            Login = "admin",
                            Password = "123",
                            PlayerId = new Guid("c8413c17-63e7-491a-9eae-0489737e19ff")
                        });
                });

            modelBuilder.Entity("Ginder.Domain.Entities.Player", b =>
                {
                    b.OwnsOne("Ginder.Domain.ValueObjects.LocationValueObject", "Location", b1 =>
                        {
                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });
                });

            modelBuilder.Entity("Ginder.Domain.Entities.PlayerGame", b =>
                {
                    b.HasOne("Ginder.Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ginder.Domain.Entities.Player", "Player")
                        .WithMany("Games")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ginder.Domain.Entities.User", b =>
                {
                    b.HasOne("Ginder.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
